DCooke Analyzer :: R11800534

firstvar	IDENT
=	ASSIGN_OP
126358756	INT_LIT
;	SEMICOLON
secondvar	IDENT
=	ASSIGN_OP
65846541846	INT_LIT
;	SEMICOLON
thirdvar	IDENT
=	ASSIGN_OP
0	INT_LIT
;	SEMICOLON
whilevar	IDENT
=	ASSIGN_OP
(	LEFT_PAREN
(	LEFT_PAREN
(	LEFT_PAREN
(	LEFT_PAREN
10	INT_LIT
*	MULT_OP
2	INT_LIT
)	RIGHT_PAREN
-	SUB_OP
5	INT_LIT
)	RIGHT_PAREN
/	DIV_OP
3	INT_LIT
)	RIGHT_PAREN
*	MULT_OP
12000	INT_LIT
)	RIGHT_PAREN
+	ADD_OP
10	INT_LIT
;	SEMICOLON
read	KEY_READ
(	LEFT_PAREN
thirdvar	IDENT
)	RIGHT_PAREN
;	SEMICOLON
write	KEY_WRITE
(	LEFT_PAREN
thirdvar	IDENT
)	RIGHT_PAREN
;	SEMICOLON
iamaverylongvariablenametoensureparserscanparselongnameslikethisone	IDENT
=	ASSIGN_OP
whilevar	IDENT
+	ADD_OP
dostuff	IDENT
-	SUB_OP
readval	IDENT
*	MULT_OP
writeval	IDENT
/	DIV_OP
secondvar	IDENT
++	INC_OP
+	ADD_OP
2	INT_LIT
;	SEMICOLON
dostuff	IDENT
=	ASSIGN_OP
iamaverylongvariablenametoensureparserscanparselongnameslikethisone	IDENT
--	DEC_OP
;	SEMICOLON
do	KEY_DO
{	LEFT_CBRACE
newvar	IDENT
=	ASSIGN_OP
thirdvar	IDENT
*	MULT_OP
4	INT_LIT
/	DIV_OP
2	INT_LIT
+	ADD_OP
1	INT_LIT
-	SUB_OP
(	LEFT_PAREN
43	INT_LIT
+	ADD_OP
21	INT_LIT
/	DIV_OP
2	INT_LIT
+	ADD_OP
othervar	IDENT
=	ASSIGN_OP
Error encounter: The next lexeme was = and the next token was ASSIGN_OP
(	LEFT_PAREN
newvar	IDENT
*	MULT_OP
3	INT_LIT
)	RIGHT_PAREN
+	ADD_OP
1	INT_LIT
;	SEMICOLON
thirdvar	IDENT
=	ASSIGN_OP
firstvar	IDENT
+	ADD_OP
1	INT_LIT
}	RIGHT_CBRACE
while	KEY_WHILE
(	LEFT_PAREN
thirdvar	IDENT
*	MULT_OP
3	INT_LIT
+	ADD_OP
6	INT_LIT
/	DIV_OP
2	INT_LIT
<	LESSER_OP
10	INT_LIT
+	ADD_OP
firstvar	IDENT
*	MULT_OP
3	INT_LIT
)	RIGHT_PAREN
;	SEMICOLON
do	KEY_DO
{	LEFT_CBRACE
do	KEY_DO
{	LEFT_CBRACE
secondvar	IDENT
=	ASSIGN_OP
firstvar	IDENT
/	DIV_OP
thirdvar	IDENT
;	SEMICOLON
writevar	IDENT
=	ASSIGN_OP
newvar	IDENT
-	SUB_OP
(	LEFT_PAREN
12	INT_LIT
+	ADD_OP
3	INT_LIT
)	RIGHT_PAREN
;	SEMICOLON
write	KEY_WRITE
(	LEFT_PAREN
writevar	IDENT
)	RIGHT_PAREN
}	RIGHT_CBRACE
while	KEY_WHILE
(	LEFT_PAREN
secondvar	IDENT
!=	NEQUAL_OP
firstvar	IDENT
)	RIGHT_PAREN
}	RIGHT_CBRACE
while	KEY_WHILE
(	LEFT_PAREN
firstvar	IDENT
==	EQUAL_OP
0	INT_LIT
)	RIGHT_PAREN
;	SEMICOLON
do	KEY_DO
{	LEFT_CBRACE
outervar	IDENT
=	ASSIGN_OP
0	INT_LIT
;	SEMICOLON
do	KEY_DO
{	LEFT_CBRACE
innervar	IDENT
=	ASSIGN_OP
0	INT_LIT
;	SEMICOLON
do	KEY_DO
{	LEFT_CBRACE
x	IDENT
=	ASSIGN_OP
outervar	IDENT
++	INC_OP
;	SEMICOLON
do	KEY_DO
{	LEFT_CBRACE
do	KEY_DO
{	LEFT_CBRACE
innervar	IDENT
=	ASSIGN_OP
innervar	IDENT
+	ADD_OP
1	INT_LIT
}	RIGHT_CBRACE
while	KEY_WHILE
(	LEFT_PAREN
firstvar	IDENT
+	ADD_OP
thirdvar	IDENT
>=	GEQUAL_OP
secondvar	IDENT
/	DIV_OP
1000	INT_LIT
)	RIGHT_PAREN
}	RIGHT_CBRACE
while	KEY_WHILE
(	LEFT_PAREN
secondvar	IDENT
-	SUB_OP
thirdvar	IDENT
+	ADD_OP
(	LEFT_PAREN
secondvar	IDENT
/	DIV_OP
outervar	IDENT
)	RIGHT_PAREN
<=	LEQUAL_OP
firstvar	IDENT
)	RIGHT_PAREN
}	RIGHT_CBRACE
while	KEY_WHILE
(	LEFT_PAREN
thirdvar	IDENT
>	GREATER_OP
firstvar	IDENT
)	RIGHT_PAREN
}	RIGHT_CBRACE
while	KEY_WHILE
(	LEFT_PAREN
secondvar	IDENT
<	LESSER_OP
thirdvar	IDENT
)	RIGHT_PAREN
}	RIGHT_CBRACE
while	KEY_WHILE
(	LEFT_PAREN
outervar	IDENT
!=	NEQUAL_OP
innervar	IDENT
)	RIGHT_PAREN
Invalid Syntax